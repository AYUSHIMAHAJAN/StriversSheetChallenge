#include <bits/stdc++.h> 
int merge(long long *arr,int n,int low,int mid,int high){
    int i=low;
    int j=mid;
    int k=low;
    long long *helper=new long long[high+1];
    int invcount=0;
    while(i<=mid-1 && j<=high){
        if(arr[i]<=arr[j]){
            helper[k]=arr[i];
            i++;
            k++;
        }
        else{
            helper[k]=arr[j];
            
            j++;
            k++;
            invcount+=(mid-i);
        }
    }


         while(j<=high){
             helper[k]=arr[j];
           
            j++;
            k++;
         }
     
   
         while(i<=mid-1){
             helper[k]=arr[i];
            
            i++;
            k++;
         }
    

     for(int i=low;i<=high;i++){
         arr[i]=helper[i];
     }

     return invcount;

}
long long mergeSort(long long *arr,int n,int low,int high){
    int mid=0;
    int invcount=0;
    if(low<high){
        mid=(low+high)/2;
        invcount+=mergeSort(arr,n,low,mid);
        invcount+=mergeSort(arr,n,mid+1,high);
        invcount+=merge(arr,n,low,mid+1,high);
    }

    return invcount;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    return mergeSort(arr,n,0,n-1);
}
